<?php
/**
 * @file
 *
 * Creating module color using Fields API
 */

/**
 * Implements hook_field_info().
 */
function example_color_field_info() {
  return array(

    'example_color_rgb' => array(
      'label' => t('Example Color RGB'),
      'description' => t('Demobstrates a field composted of an RGB color'),
      'default_widget' => 'example_color_3text',
      'default_formatter' => 'example_color_simple_text',
    ),
  );
}

/**
 * Implements hook_field_schema().
 */
function example_color_field_schema() {

  $columns = array(
    'rgb' => array(
      'type' => 'varchar',
      'length' => 7,
      'not null' => FALSE ,
    ),
  );
  $indexes = array(
    'rgb' =>array('rgb'),
    );
  return array(
    'columns' => $columns,
    'indexes' => $indexes,
  );
}

/**
 * Implements hook_field_validate().
 */
function example_color_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['rgb'])) {
      if (!preg_match('@^#[0-9a-f]{6}$@', $item['rgb'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'color_example_invalid',
          'message' => t('Color must be in the HTML format #blabla.')
          );
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 *
 * Function return TRUE or FALSE depending on whatever the field empty
 */
function example_color_field_is_empty($item, $field) {
  return empty($item['rgb']);
}

/**
 * Implements hook_field_formatter_info().
 */
function example_color_field_formatter_info() {
  return array(
    /*
     *'text_default' => array(
     *  'label' => t('Default'),
     *  'field types' => array('text', 'text_long', 'text_with_summary'),
     *),
     */
    'example_color_simple_text' => array(
      'label' => t('Simple color base formatter'),
      'field types' => array('example_color_rgb'),
      ),

    'example_color_simple_background' => array(
      'label' => t('Change the background of the output text'),
      'field types'=> array('example_color_rgb'),
      ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function example_color_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {

    case 'example_color_simple_text':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#markup' => '<p style = "color:'.$item['rgb'].'"> '.t('The color for this event is @code',array('@code'=>$item['rgb'])).'</p>',
        );
      }
      break;

    case 'example_color_simple_background':
      foreach ($items as $delta=>$item) {
        $element[$delta] = array(
          '#markup' => '<p>'.t('The color for this  event has been change to @code', array('@code'=>$item['rgb'])).'</p>',
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 *
 * Function define the widget to be used display the field on edit form
 */
function example_color_field_widget_info() {
    return array(
    'example_color_text' => array(
      'label' => t('RGB value as #ffffff'),
      'field types' => array('example_color_rgb'),
      ),
    'example_color_3text' => array(
      'label' => t('RGB text fields'),
      'field types' => array('example_color_rgb'),
      ),
    'example_color_colorpicker' => array(
      'label' => t('Color Picker'),
      'field types' => array('example_color_rgb'),
      ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * Function define the actulal structure display to the user
 */
function example_color_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['rgb']) ? $items[$delta]['rgb'] : '';
  $element += array(
    '#delta' => $delta,
  );
  $element['rgb'] = array();

  switch ($instance['widget']['type']) {
    case 'example_color_colorpicker':
      $element['rgb'] += array(
        '#suffix' => '<div class = "field-example-colorpicker"></div>',
        '#attributes' => array('class' => array('edit-field-example-colorpicker')),
        '#attached' => array(
          // add farbtaslic color picker
          'library' => array(
            array('system', 'farbtaslic'),
            ),
          'js' => array(drupal_get_path('module', 'example_color').'/example_color.js')
          ),
        );
      break;

    case 'example_color_text':
      $element['rgb'] += array(
        '#title' => t('Event\'s RGB Color'),
        '#type' => 'textfield',
        '#default_value' => $value,
        '#size' => 7,
        '#maxlength' =>7,
        );
      break;

    case 'example_color_3text':
      if (isset($items[$delta]['rgb'])) {
        preg_match('@..@', substr($items[$delta]['rgb'], 1), $match);
      } else {
        $match = array(array());
      }
      $element['rgb'] += array(
        '#type' => 'fieldset',
        '#element_validate' => array('color_example_3text_validate'),
        '#delta' => $delta,
        '#attached' => array(drupal_get_path('module', 'example_color').'/color_example.css')
        );

      foreach (array('r'=>t('Red'), 'g' =>t('Green'), 'b' => t('Blue')) as $key => $title) {
        $element[$key] = array(
          '#type' => 'textfield',
          '#title' => $title,
          '#size' => 2,
          '#default_value' => array_shift($match[0]),
          '#attributes' => array('class' => array('rgb-entry')),
          );
      }

      break;
  }

  return $element;
}

/**
 * Implements hook_validate().
 */
function color_example_3text_validate($element, &$form_state) {
  $delta = $element['#delta'];
  $field = $form_state['field'][$element['#field_name']][$element['#language']]['field'];
  $field_name = $field['field_name'];
  if (isset($form_state['values'][$field_name][$element['#language']][$delta])) {

    $values = $form_state['values'][$field_name][$element['#language']][$delta];
    foreach (array('r', 'g', 'b') as $colorfield) {

      $val = hexdec($values[$colorfield]);
      // If they left any empty, we'll set the value empty and quit.
      if (strlen($values[$colorfield]) == 0) {

      form_set_value($element, array('rgb' => NULL), $form_state);
      return;
      }
      // If they gave us anything that's not hex, reject it.
      if ( (strlen($values[$colorfield]) != 2) || $val < 0 || $val > 255) {

      form_error($element[$colorfield], t("Saturation value must be a 2-digit hexadecimal value between 00 and ff."));
      }
    }
    $value = sprintf('#%02s%02s%02s', $values['r'], $values['g'], $values['b']);
    form_set_value($element, array('rgb' => $value), $form_state);
  }
}

/**
 * Implements hook_field_widget_error().
 */
function example_color_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'color_example_invalid':

      form_error($element, $error['message']);
      break;

  }
}
