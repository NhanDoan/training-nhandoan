<?php
/**
 * [guest_post_access_views_api description]
 * @return [type] [description]
 */
function guest_post_access_views_api() {
    return array(
        'api' => 3
    );
}

/**
 * [guest_post_access_help description]
 * @param  [type] $path [description]
 * @param  [type] $arg  [description]
 * @return [type]       [description]
 */
function guest_post_access_help($path, $arg) {
    switch($path) {
        case "admin/help#guest_post_access":
            return '<p>' . t('Custom Edit Nodes & Access Permissions for Guest Posts') . '</p>';
    }
}
/**
 * Function
 * @param  [type] $module [description]
 * @param  [type] $plugin [description]
 * @return [type]         [description]
 */
function guest_post_access_ctools_plugin_directory($module, $plugin) {
    if ($module == 'ctools') {
        return 'plugins/' . $plugin;
    }
}
/**
 * [guest_post_access_permission description]
 * @return [type] [description]
 */
function guest_post_access_permission() {
    return array(
        'invite new writers' => array(
            'title' => t('Invite New Writers'),
            'description' => t('Invite new writers to the guest post portal')
        ),
        'invite new editors' => array(
            'title' => t('Invite New Editors'),
            'description' => t('Invite new editors to the guest post portal')
        ),
        'disable writers' => array(
            'title' => t('Disable Writer Accounts'),
        ),
        'disable editors' => array(
            'title' => t('Disable Editor Accounts')
        )
    );
}

// XXX in the real world these should be loaded via taxonomy api
// or something
define('GPA_STATUS_UNASSIGNED', '68');
define('GPA_STATUS_WIP', '62');
define('GPA_STATUS_READY_FOR_REVIEW', '63');
define('GPA_STATUS_DONE', '64');

/* Hook the guest post edit form so we can clear the redirect */
function guest_post_access_form_guest_post_node_form_alter(&$form, &$form_state, $form_id)
{
    $node = $form_state['node'];
    global $user;
    unset($form['actions']['preview']);
    $form['#prefix'] = '<div id="guest-post-edit-wrapper">';
    $form['#suffix'] = '</div>';
    $form_modified = FALSE;
    $post_status = field_get_items('node', $node, 'field_status');
    if ($post_status[0]['tid'] == GPA_STATUS_WIP) {

        if (in_array('editor', array_values($user->roles))) {
            $form['actions']['draft'] = array(
                '#type' => 'submit',
                '#value' => t('Save'),
                '#weight' => 5,
                '#submit' => array('node_form_submit'),
            );

            if (count($node->field_assigned_to) > 0) {
                $form['actions']['reject_author'] = array(
                    '#type' => 'submit',
                    '#value' => t('Unassign Post'),
                    '#weight' => 10,
                    '#submit' => array('guest_post_access_reject_author'),
                );
            }
        } else {
            $form['actions']['draft'] = array(
                '#type' => 'submit',
                '#value' => t('Save As Draft'),
                '#weight' => 5,
                '#submit' => array('node_form_submit'),
            );

            $form['actions']['to_editor'] = array(
                '#type' => 'submit',
                '#value' => t('Send To Editor'),
                '#weight' => 3,
                '#submit' => array('guest_post_access_send_to_editor_submit'),
            );
            $form['actions']['reject_author'] = array(
                '#type' => 'submit',
                '#value' => t('Unassign Myself From Article'),
                '#weight' => 10,
                '#submit' => array('guest_post_access_reject_author'),
            );
        }

        $form_modified = TRUE;
    } else if ($post_status[0]['tid'] == GPA_STATUS_READY_FOR_REVIEW) {

        $form['actions']['accept'] = array(
            '#type' => 'submit',
            '#value' => t('Accept Post'),
            '#weight' => 3,
            '#submit' => array('guest_post_access_accept_post'),
        );

        $form['actions']['back_to_author'] = array(
            '#type' => 'submit',
            '#value' => t('Return to Author For Revision'),
            '#weight' => 5,
            '#submit' => array('guest_post_access_return_to_author'),
        );

        $form['actions']['reject_author'] = array(
            '#type' => 'submit',
            '#value' => t('Reject Author Altogether'),
            '#weight' => 10,
            '#submit' => array('guest_post_access_reject_author'),
        );

        $form_modified = TRUE;
    }

     if ($form_modified &&
        $user->uid != 1 &&
        !in_array('administrator', array_values($user->roles)) &&
        property_exists($node, 'nid')) {
        unset($form['actions']['submit']);
    }

    $form['field_rating']['#access'] = FALSE;

}

/********* WRITER SUBMIT FUNCTIONS ***************/
function guest_post_access_send_to_editor_submit($form, &$form_state)
{
    $form_state['values']['field_status']['und'][0]['tid'] = GPA_STATUS_READY_FOR_REVIEW;
    node_form_submit($form, $form_state);
    $form_state['redirect'] = '<front>';
    drupal_set_message('Post sent to editor for review.');
}

/*********** EDITOR SUBMIT FUNCTIONS **************/

function guest_post_access_return_to_author($form, &$form_state)
{
    node_form_submit($form, $form_state);
    $form_state['redirect'] = '<front>';
    $node = $form_state['node'];
    rules_invoke_component('rules_link_set_return_guest_post_to_author', $node);
}

function guest_post_access_accept_post($form, &$form_state)
{
    node_form_submit($form, $form_state);
    $form_state['redirect'] = '<front>';
    $node = $form_state['node'];
    rules_invoke_component('rules_link_set_ready_for_publication', $node);
}

function guest_post_access_reject_author($form, &$form_state)
{
    node_form_submit($form, $form_state);
    $form_state['redirect'] = '<front>';
    $node = $form_state['node'];
    rules_invoke_component('rules_link_set_reject_author', $node);
    $node->field_assigned_to = array();
    node_save($node);
}

/************ ACCESS FUNCTIONS ****************/

function _gpa_node_assigned_to_current_user($node)
{
    global $user;

    return (isset($node->field_assigned_to) &&
            count($node->field_assigned_to) > 0 &&
            count($node->field_assigned_to['und']) > 0 &&
            $node->field_assigned_to['und'][0]['target_id'] == $user->uid);
}

function guest_post_access_node_access($node, $op, $account) {
    global $user;
    if ($user === NULL || $node === NULL || !is_object($node) || $node->type != 'guest_post') {
        return NODE_ACCESS_IGNORE;
    }

    if ($op == 'view') {
        $guest_post_type = field_get_items('node', $node, 'field_guest_post_type');
        $user_fields = user_load($user->uid);
        $user_type = field_get_items('user', $user_fields, 'field_guest_post_type');
        if ($user_type === FALSE) {
            $user_type = array();
        }

        // If an editor or if it's assigned to you, you can view it
        if (in_array('editor', array_values($user->roles)) ||
            _gpa_node_assigned_to_current_user($node)) {
            return NODE_ACCESS_ALLOW;
        }

        // Otherwise category must match yours
        $gp_types = array();
        foreach ($guest_post_type as $gp_type) {
            $gp_types[] = $gp_type['tid'];
        }

        foreach($user_type as $type) {
            foreach($gp_types as $g_type) {
                if ($g_type == $type['tid']) {
                    return NODE_ACCESS_IGNORE;
                }
            }
        }

        return NODE_ACCESS_DENY;
    } else if ($op == 'update' || $op == 'delete') {
        // Editors can always edit posts
        if (in_array('editor', array_values($user->roles))) {
            return NODE_ACCESS_IGNORE;
        }

        // Writers can't edit posts that aren't assigned to them
        if (!_gpa_node_assigned_to_current_user($node)) {
            return NODE_ACCESS_DENY;
        }

        // (Ghetto!)
        // Writers can't edit their posts if in ready for review/done state
        // TID 63 is Ready For Review
        // TID 64 is Done!
        if ($node->field_status['und'][0]['tid'] == 63 ||
            $node->field_status['und'][0]['tid'] == 64) {
            return NODE_ACCESS_DENY;
        }
    }
    return NODE_ACCESS_IGNORE;
}

/************** FORM FUNCTIONS **************/
function guest_post_access_forms($form_id, $args) {
    $forms['guest_post_access_invite_writer_form'] = array(
        'callback' => 'guest_post_access_invite_user_form',
        'callback arguments' => array('writer'),
    );

    $forms['guest_post_access_invite_editor_form'] = array(
        'callback' => 'guest_post_access_invite_user_form',
        'callback arguments' => array('editor'),
    );

    return $forms;
}

function guest_post_access_menu() {
    $items['user/invite-writer'] = array(
        'title' => 'Invite New Writer',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('guest_post_access_invite_writer_form'),
        'access callback' => 'user_access',
        'access arguments' => array('invite new writers')
    );

    $items['user/invite-editor'] = array(
        'title' => 'Invite New Editor',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('guest_post_access_invite_editor_form'),
        'access callback' => 'user_access',
        'access arguments' => array('invite new editors')
    );

    $items['user/%user/writer-roles'] = array(
        'title' => 'Writer Pools',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('guest_post_access_writer_role_form', 1),
        'access callback'  => 'guest_post_writer_role_access',
        'access arguments' => array(1),
        'type' => MENU_LOCAL_TASK,
        'weight' => 20
    );

    $items['user/%user/change-state'] = array(
        'title callback' => 'guest_post_access_user_toggle_title',
        'title arguments' => array(1),

        'page callback' => 'drupal_get_form',
        'page arguments' => array('guest_post_access_user_toggle_form', 1),

        'access callback' => 'guest_post_access_user_toggle_access',
        'access arguments' => array(1),

        'type' => MENU_LOCAL_TASK,
        'weight' => 30
    );

    return $items;
}

function guest_post_access_menu_alter(&$items)
{

    $items['user/%user']['access callback'] = 'guest_post_user_view_access';

    /*
    foreach($items as $key => $val) {
        if (strpos($key, 'user') !== FALSE) {
            var_dump($key);
            var_dump($val);
        }
    }

    die();
    */

}
function guest_post_writer_role_access($account = NULL) {
    global $user;

    if ($user->uid == 1 || user_access('administer users')) {
        return TRUE;
    }

    if (in_array('editor', array_values($user->roles)) &&
        in_array('writer', array_values($account->roles))) {
        return TRUE;
    }

    return FALSE;
}

function guest_post_access_invite_user_form($form, &$form_state, $role)
{
    $form['#user'] = drupal_anonymous_user();
    $form['#validate'][] = 'user_account_form_validate';
    $form['#user_category'] = 'register';
    $form['#role'] = $role;

    // Only show name field on registration form or user can change own username.
    $form['account']['name'] = array(
        '#type' => 'textfield',
        '#title' => t('Username'),
        '#maxlength' => USERNAME_MAX_LENGTH,
        '#description' => t('Spaces are allowed; punctuation is not allowed except for periods, hyphens, apostrophes, and underscores.'),
        '#required' => TRUE,
        '#attributes' => array('class' => array('username')),
        '#weight' => -10,
    );

    $form['account']['mail'] = array(
        '#type' => 'textfield',
        '#title' => t('E-mail address'),
        '#maxlength' => EMAIL_MAX_LENGTH,
        '#required' => TRUE,
    );

    $form['actions'] = array('#type' => 'actions');
    $form['actions']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Invite User'),
        '#submit' => array('guest_post_access_invite_user_form_process')
    );

    field_attach_form('user', $form['#user'], $form, $form_state);

    unset($form['field_address']);
    unset($form['field_paypal_email']);
    unset($form['field_paypal_phone']);

    if ($role !== 'writer') {
        unset($form['field_guest_post_type']);
    }
    return $form;
}

function guest_post_access_invite_user_form_process($form, &$form_state)
{
    global $user;

    $pass = user_password();
    $account = $form['#user'];

    form_state_values_clean($form_state);

    $form_state['values']['pass'] = $pass;
    $form_state['values']['init'] = $form_state['values']['mail'];

    entity_form_submit_build_entity('user', $account, $form, $form_state);

    // Populate $edit with the properties of $account, which have been edited on
    // this form by taking over all values, which appear in the form values too.
    $edit = array_intersect_key((array) $account, $form_state['values']);

    // Force user to be active and have the writer role
    $edit['status'] = 1;

    $role = user_role_load_by_name($form['#role']);
    $edit['roles'] = array($role->rid => $form['#role']);

    $account = user_save($account, $edit);
    if (!$account) {
        die('error');
    }

    // Email them
    $params['account'] = $account;
    $language = user_preferred_language($account);
    $mail = drupal_mail('user', 'register_admin_created', $account->mail, $language, $params);

    watchdog('guest_portal', '@new_user (@new_email) invited by @cur_user',
        array('@new_user' => $account->name,
              '@new_email' => $account->mail,
              '@cur_user' => $user->name));
    drupal_set_message(t('@new_user has been invited', array('@new_user' => $account->name)));
}

function guest_post_access_writer_role_form($form, &$form_state, $role)
{
    $form['#user'] = $role;

   field_attach_form('user', $form['#user'], $form, $form_state);

    foreach (array_keys($form) as $key) {
        if (strlen($key) > 6 &&
            strncmp($key, 'field_', 6) == 0 &&
            $key != 'field_guest_post_type') {
            unset ($form[$key]);
        }
    }

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save'),
        '#weight' => 999
    );

    return $form;
}

function guest_post_access_user_disable_form($form, &$form_state, $target_user)
{
    $form['#user'] = $target_user;

    field_attach_form('user', $form['#user'], $form, $form_state);

    foreach (array_keys($form) as $key) {
        if (strlen($key) > 6 &&
            strncmp($key, 'field_', 6) == 0 &&
            $key != 'field_guest_post_type') {
            unset ($form[$key]);
        }
    }

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save'),
        '#weight' => 999
    );

    return $form;
}

function guest_post_access_writer_role_form_validate($form, &$form_state)
{
    field_attach_form_validate('user', $form['#user'], $form, $form_state);
}

function guest_post_access_writer_role_form_submit($form, &$form_state)
{
    drupal_set_message(t('Roles Updated'));
    field_attach_submit('user', $form['#user'], $form, $form_state);
    user_save($form['#user']);
}

/****** NODE HOOKS ******/
function guest_post_access_field_attach_submit($entity_type, $entity, $form, &$form_state) {
    if ($entity_type != 'node' ||
        $entity->type != 'guest_post') {
        return;
    }

    if (count($entity->field_assigned_to) > 0  &&
        count($entity->field_assigned_to['und']) > 0 &&
        $form_state['values']['field_status']['und'][0]['tid'] === "68") {
        $entity->field_status['und'][0]['tid'] = GPA_STATUS_WIP;
    }
}

function guest_post_access_node_view_alter(&$build)
{
    // Rename send author a message -> send editor a message
    // Hide add comment link since they have their own tab
    if (empty($build['#node']->type) ||
        $build['#node']->type != 'guest_post') {
        return;
    }

    if (!empty($build['links']['#links']['privatemsg_link']['title'])) {
        $build['links']['#links']['privatemsg_link']['title'] = t('Send Editor A Message');
    }

    if (!empty($build['links']['comment'])) {
        $build['links']['comment']['#access'] = FALSE;
    }
}

/** TOGGLE USER STATE FUNCTIONS **/

function guest_post_access_user_toggle_title($user)
{
    return ($user->status == 0) ? 'Unblock User' : 'Block User';
}

function guest_post_user_view_access($target_user)
{
    if ($target_user->status == 0 && guest_post_access_user_toggle_access($target_user)) {
        return TRUE;
    } else {
        return user_view_access($target_user);
    }
}

function guest_post_access_user_toggle_access($target_user)
{
    $perm_to_check = '';
    $target_user_roles = array_values($target_user->roles);

    if (in_array('editor', $target_user_roles)) {
        $perm_to_check = 'disable editors';
    } else if (in_array('writer', $target_user_roles)) {
        $perm_to_check = 'disable writers';
    }

    // If this user isn't an editor or a writer, can't touch them.
    if ($perm_to_check === '' || in_array('administrator', $target_user_roles)) {
        return FALSE;
    }

    return user_access($perm_to_check);
}

function guest_post_access_user_toggle_form($form, &$form_state, $target_user)
{
    $target_action = ((int)$target_user->status === 0) ? 'unblock' : 'block';
    $user_name = _guest_post_access_get_user_fullname($target_user);

    $form['#user'] = $target_user;
    $form['#user_action'] = $target_action;

    $target_text = "Are you sure you want to $target_action $user_name?";

    $form['confirm_text'] = array(
        '#weight' => -15,
        '#markup' => $target_text,
        '#prefix' => '<p>',
        '#suffix' => '</p>'
    );

    $form['actions']['submit'] = array(
        '#type' => 'submit',
        '#weight' => 20,
        '#value' => ucfirst($target_action) . " $user_name"
    );

    $form['actions']['cancel'] = array(
        '#type' => 'submit',
        '#value' => t('No, Cancel'),
        '#weight' => 25,
        '#submit' => array('guest_post_access_toggle_form_cancel_submit')
    );

    return $form;
}

function guest_post_access_user_toggle_form_submit($form, &$form_state)
{
    global $user;
    $logged_in_user = $user;
    $target_user = $form['#user'];

    watchdog('guest_post_access',
        t('%logged_in_user %action ed %target_user',
            array('%logged_in_user' => $logged_in_user->name,
                  '%action' => $form['#user_action'],
                  '%target_user' => $target_user->name
        )));

    $new_status = ($form['#user_action'] === 'block') ? 0 : 1;
    $target_user->status = $new_status;
    user_save($target_user);

    $form_state['rebuild'] = TRUE;

    drupal_set_message(t('%target_user has been %action ed.',
        array(
            '%action' => $form['#user_action'],
            '%target_user' => $target_user->name
        )));
    drupal_goto('user/' . $target_user->uid);
}

function guest_post_access_toggle_form_cancel_submit($form, &$form_state)
{
    drupal_goto('user/' . $form['#user']->uid);
}

function _guest_post_access_get_user_fullname($user)
{
    if (empty($user->field_full_name['und'])) {
        $full_name = $user->name;
    } else {
        $full_name = $user->field_full_name['und'][0]['safe_value'];
    }

    return $full_name;
}
